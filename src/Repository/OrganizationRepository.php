<?php

namespace App\Repository;

use App\Entity\Conference;
use App\Entity\Participating\ConferenceOrganization;
use App\Entity\Participating\Organization;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * OrganizationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganizationRepository extends EntityRepository
{
    /**
     * Find organizations to check requisites where invalidInnKpp in null
     *
     * @author Evgeny Nachuychenko e.nachuychenko@nag.ru
     * @return Organization[]
     */
    public function findNotInnKppCheckedWithB2bGuid()
    {
        $qb = $this->createQueryBuilder('o');

        $query = $qb
            ->select('o')
            ->where($qb->expr()->isNotNull('o.b2b_guid'))
            ->andWhere($qb->expr()->isNull('o.invalidInnKpp'));

        return $query->getQuery()->getResult();
    }

    /**
     * Return organizations which participating in CROS-{$year}
     * without b2b_guid (b2b_guid === NULL)
     *
     * @author Evgeny Nachuychenko e.nachuychenko@nag.ru
     * @param $year
     * @return mixed
     */
    public function findWithoutB2bGuidByConferenceYear(int $year)
    {
        $qb = $this->createQueryBuilder('o');

        $query = $qb
            ->select('o')
            ->leftJoin(ConferenceOrganization::class, 'co', Expr\Join::WITH, 'o = co.organization')
            ->leftJoin(Conference::class, 'c', Expr\Join::WITH, 'c = co.conference')
            ->where('c.year = :year')
            ->andWhere($qb->expr()->isNull('o.b2b_guid'))
            ->setParameters([
                'year' => $year,
            ]);

        $result = $query->getQuery()->getResult();

        return $result;
    }

    /**
     * возвращает названия организаций с заданным ИНН/КПП, окончательно зарегистрированных в конференции текущего года
     * @param string $inn - ИНН организации
     * @param string $kpp - КПП организации
     * @return array
     */
    public function findByInnKppIsFinish($inn, $kpp)
    {
        $conn = $this->getEntityManager()->getConnection();
        $params=['inn'=>$inn,'kpp'=>$kpp,'y'=>date('Y')];

        $sql = "SELECT
	              o.name as name
                FROM
	              participating.conference_organization co
                inner JOIN participating.organization o ON co.organization_id = o.id
                inner JOIN public.conference c ON co.conference_id = c.id
                where
                  o.inn = :inn AND 
                  o.kpp = :kpp AND 
                  co.finish = true AND 
                  c.year = :y";

        $stmt = $conn->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchAll();
    }
}

<?php

namespace App\Repository;

use App\Entity\Conference;
use App\Entity\Participating\ConferenceMember;
use App\Entity\Participating\User;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Mapping AS ORM;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    /**
     * @param string $username
     * @return object|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function loadUserByUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Using in authenticators to find
     *
     * @author Evgeny Nachuychenko e.nachuychenko@nag.ru
     * @param $email
     * @return User|null
     */
    public function findActiveUserByEmail($email)
    {
        $em = $this->getEntityManager();

        $rsm = new ResultSetMappingBuilder($em);
        $rsm->addRootEntityFromClassMetadata(User::class, 'u');

        $sql = "
            SELECT pm.*
            FROM participating.member pm
            WHERE (pm.email =:email OR (:email = ANY(SELECT jsonb_array_elements_text(pm.additional_emails::jsonb))))
              AND pm.is_active = TRUE
            LIMIT 1
        ";

        $query = $em->createNativeQuery($sql, $rsm);
        $query->setParameters([
            'email' => mb_strtolower($email),
        ]);

        try {
            return $query->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Return users which participating in CROS-{$year}
     * without b2b_guid (b2b_guid === NULL)
     *
     * @author Evgeny Nachuychenko e.nachuychenko@nag.ru
     * @param int $year
     * @param bool $onlyRepresentative
     * @return mixed
     */
    public function findWithoutB2bGuidByConferenceYear(int $year, $onlyRepresentative = FALSE)
    {
        $qb = $this->createQueryBuilder('u');

        $query = $qb
            ->select('u')
            ->leftJoin(ConferenceMember::class, 'cm', Expr\Join::WITH, 'cm.user = u')
            ->leftJoin(Conference::class, 'c', Expr\Join::WITH, 'cm.conference = c')
            ->where('c.year = :year')
            ->andWhere($qb->expr()->isNull('u.b2b_guid'));

        if ($onlyRepresentative) {
            $query->andWhere('u.representative = TRUE');
        }

        return $query
            ->setParameters([
                'year' => $year,
            ])
            ->getQuery()
            ->getResult();
    }

    /**
     * @author Evgeny Nachuychenko e.nachuychenko@nag.ru
     * @param array $data
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function searchBy(array $data = [])
    {
        $conn = $this->getEntityManager()->getConnection();

        $query = "
            FROM participating.member m
              LEFT JOIN participating.organization o ON m.organization_id = o.id
            WHERE true
        ";

        /** Check for search param */
        if (isset($data['search'])) {
            $val = strtolower($data['search']);
            $query .= " AND CONCAT_WS(' ', m.last_name, m.first_name, m.middle_name, m.email, o.name) ILIKE '%$val%'";
        }

        /** Check for role */
        if (isset($data['role'])) {
            $query .= " AND m.roles ILIKE '%{$data['role']}%'";
        }

        $sql = "
            SELECT
                m.id,
                m.first_name,
                m.last_name,
                m.middle_name,
                m.email,
                m.post,
                regexp_replace(m.roles, '\W+', '', 'g') AS role,
                m.sex,
                m.phone,
                m.is_active,
                m.representative,
                m.post,
                m.created_at,
                o.id as organization_id,
                o.name as organization_name
        " . $query;
        $sqlC = "SELECT COUNT(m.id) " . $query;

        $sql .= " ORDER BY id ASC";

        /** limit and offset */
        $limit = intval($data['@limit'] ?? 10);
        $offset = intval($data['@offset'] ?? 0);
        $sql .= " LIMIT $limit OFFSET $offset";

        $stmt = $conn->prepare($sql);
        $stmt->execute();
        $items = $stmt->fetchAll();

        $stmt = $conn->prepare($sqlC);
        $stmt->execute();
        $count = $stmt->fetchColumn();

        return [$items, $count];
    }
}

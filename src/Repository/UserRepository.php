<?php

namespace App\Repository;

use App\Entity\Conference;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Mapping AS ORM;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    /**
     * @param string $username
     * @return object|null
     */
    public function loadUserByUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Search users
     *
     * @param array $data
     * @return array
     */
    public function searchBy(array $data = [])
    {
        $limit = 10;
        $offset = null;
        $parameters = [];
        $qb = $this->createQueryBuilder('m');

        $query = $qb->select('m');

        /** Check for search string */
        if (isset($data['search'])) {
            $val = $data['search'];
            $query->andWhere(
                $qb->expr()->orX(
                    "m.fist_name LIKE '%$val%'",
                    "m.last_name LIKE '%$val%'",
                    "m.email LIKE '%$val%'"
                )
            );
        }

        /** Check for role filter */
        if (isset($data['role'])) {
            $query->andWhere('m.roles LIKE "%:role%"');
            $parameters['role'] = $data['role'];
        }

        /** Check for limit and offset */
        if (isset($data['@limit'])) {
            $limit = (int) $data['@limit'];
        }
        if (isset($data['@offset'])) {
            $offset = (int) $data['@offset'];
        }

        $queryC = clone $query;

        $result = [
            $query->setMaxResults($limit)->setFirstResult($offset)->getQuery()->getResult(),
            count($queryC->getQuery()->getArrayResult()),
        ];

        return $result;
    }

    /**
     *
     */
    public function searchBySQL(array $data = [])
    {
        $conn = $this->getEntityManager()->getConnection();

        $stmt = $conn->prepare("
            SELECT
              rt.id AS room_type_id,
              rt.title AS room_type_title,
              COUNT(DISTINCT cm.id) AS busy,
              COUNT(DISTINCT p.id) AS populated,
              COUNT(DISTINCT r.id)*rt.max_places AS total
            FROM abode.room_type rt
              LEFT JOIN abode.room r ON rt.id = r.type_id
              LEFT JOIN participating.conference_member cm ON rt.id = cm.room_type_id
              LEFT JOIN abode.place p ON cm.id = p.conference_member_id
            GROUP BY rt.id
        ");

        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }

    /**
     * @deprecated Used on symfony 3
     *
     * @param array $users
     * @param int $ap
     * @return mixed|null
     */
    public function findAllByUsers($users = array(), $ap = 0)
    {
        $ids_array = array();
        foreach ($users as $user) {
            $ids_array[$user->getUserId()] = $user->getUserId();
        }
        ksort($ids_array);

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT u, o, uta, ai FROM App:User u
                LEFT JOIN u.organization o
                LEFT JOIN u.utoas uta
                LEFT JOIN uta.apartament ai
                LEFT JOIN ai.apartament a
                WHERE u.id in(:ids) AND (uta.approved = :approved OR uta.approved IS NULL) ORDER BY u.id ASC'
            )->setParameter('ids', $ids_array)->setParameter('approved', $ap);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    /**
     * @deprecated Used on symfony 3
     *
     * @param $conf_id
     * @param $year
     * @return mixed|null
     */
    public function findManagers($conf_id, $year)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT u FROM App:User u
                WHERE u.roles LIKE :role
            ')->setParameter('role', "%ROLE_MANAGER%");//->setParameter('conf', $conf_id)->setParameter('year', $year);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * @deprecated Used on symfony 3
     *
     * Finder for speakers
     * @param string $find
     * @return object|null
     */
    public function findUser($find)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT u, o FROM App:User u
                LEFT JOIN u.organization o
                WHERE u.firstName IN (:find)
                AND u.lastName IN (:find)
            ')->setParameter('find', $find);
        try {
            return $query->setMaxResults(5)->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * @deprecated Used on symfony 3
     *
     * Search user
     * @param string $string
     * @return object|null
     */
    public function search($string)
    {
        $strings = explode(' ', $string);
        if (count($strings) != 2) {
            $query = $this->getEntityManager()
                ->createQuery('
                SELECT u, o FROM App:User u
                LEFT JOIN u.organization o
                WHERE u.firstName IN (:strings)
                OR u.lastName IN (:strings)
                OR u.middleName IN (:strings)
                OR o.name IN (:strings)
                OR o.name LIKE :string
            ')->setParameter('strings', $strings)->setParameter('string', '%' . $string . '%');
        } else {
            $query = $this->getEntityManager()
                ->createQuery('
                    SELECT u, o FROM App:User u
                    LEFT JOIN u.organization o
                    WHERE (u.firstName IN (:strings)
                    AND u.lastName IN (:strings))
                    OR (u.firstName IN (:strings)
                    AND u.middleName IN (:strings))
                    OR (o.name LIKE :string)
                ')->setParameter('strings', $strings)->setParameter('string', '%' . $string . '%');
        }

        try {
            return $query->setMaxResults(5)->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * @deprecated Used on symfony 3
     *
     * Search user
     * @param string $string
     * @param int $offset
     * @param int $limit
     * @return object|null
     */
    public function easySearchUser($string, $offset, $limit)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                    SELECT u FROM App:User u
                    WHERE (u.firstName LIKE :string  
                    OR u.middleName LIKE :string
                    OR u.username LIKE :string
                    OR u.email LIKE :string
                    OR u.nickname LIKE :string
                    OR u.lastName LIKE :string
                    )
                ')
            ->setParameter('string', '%' . $string . '%')
            ->setMaxResults($limit)
            ->setFirstResult($offset);
        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $c = count($paginator);
        $search = new \stdClass();
        $search->query = $query->getResult();
        $search->count = $c;
        try {
            return $search;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
